package gui;

import db.DBConnection;
import models.Car;
import models.User;

import javax.swing.*;
import java.awt.*;
import java.sql.*;

public class BookRideFrame extends JFrame {
    private final User user;
    private JComboBox<String> categoryBox;
    private JComboBox<Car> carBox;
    private JTextField daysField, distanceField, costField;

    public BookRideFrame(User user) {
        this.user = user;
        setTitle("üöó Book Ride");
        setSize(500, 400);
        setLocationRelativeTo(null);
        setLayout(new GridLayout(7, 2, 10, 10));
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);

        categoryBox = new JComboBox<>(new String[]{"Economy", "Standard", "Luxury"});
        carBox = new JComboBox<>();
        daysField = new JTextField();
        distanceField = new JTextField();
        costField = new JTextField(); costField.setEditable(false);

        JButton loadCarsBtn = new JButton("üîÑ Load Cars");
        JButton calcCostBtn = new JButton("üí∞ Calculate Cost");
        JButton confirmBtn  = new JButton("‚úÖ Confirm Booking");

        // Add components
        add(new JLabel("üöô Select Category:")); add(categoryBox);
        add(loadCarsBtn); add(carBox);
        add(new JLabel("üìÖ Number of Days:")); add(daysField);
        add(new JLabel("üìç Distance (km):")); add(distanceField);
        add(new JLabel("üí∏ Total Cost:")); add(costField);
        add(calcCostBtn); add(confirmBtn);

        // Load cars action
        loadCarsBtn.addActionListener(e -> {
            carBox.removeAllItems();
            try (Connection conn = DBConnection.getConnection()) {
                PreparedStatement ps = conn.prepareStatement("SELECT * FROM cars WHERE category=? AND is_available=1");
                ps.setString(1, categoryBox.getSelectedItem().toString());
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    Car car = new Car(
                            rs.getInt("id"),
                            rs.getString("model"),
                            rs.getString("category"),
                            rs.getDouble("price_per_day"),
                            true
                    );
                    carBox.addItem(car);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });

        // Calculate cost
        calcCostBtn.addActionListener(e -> {
            Car car = (Car) carBox.getSelectedItem();
            if (car == null) return;
            try {
                int days = Integer.parseInt(daysField.getText());
                double cost = days * car.getPricePerDay();
                costField.setText(String.format("%.2f", cost));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "‚ö†Ô∏è Invalid number of days.");
            }
        });

        // Confirm booking
        confirmBtn.addActionListener(e -> {
            Car car = (Car) carBox.getSelectedItem();
            if (car == null) {
                JOptionPane.showMessageDialog(this, "‚ö†Ô∏è Please select a car.");
                return;
            }
            try (Connection conn = DBConnection.getConnection()) {
                PreparedStatement bookStmt = conn.prepareStatement(
                        "INSERT INTO bookings (user_email, car_id) VALUES (?, ?)");
                bookStmt.setString(1, user.getEmail());
                bookStmt.setInt(2, car.getId());
                bookStmt.executeUpdate();

                PreparedStatement updateCar = conn.prepareStatement("UPDATE cars SET is_available=0 WHERE id=?");
                updateCar.setInt(1, car.getId());
                updateCar.executeUpdate();

                JOptionPane.showMessageDialog(this, "‚úÖ Ride Booked Successfully!");
                dispose();
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "‚ùå Booking failed.");
            }
        });

        setVisible(true);
    }
}
